import numpy as np






# def smooth(data=[],gap=30):
    
#     out = []
#     end = len(data)-gap
#     print('begin')
    
#     if list(np.isnan(data)).count(True) == 0: # if nancount = 0
        
#         smoo = lambda i : out.append(np.mean(data[i:i+gap]))#,print(data[i:i+gap]))
#         null = list(map(smoo,range(end)))
        
#         return np.array(out)
    
#     else:
#         smoo = lambda i :  (  out.append( np.nansum(data[i:i+gap])/  # sum of data excluding nans 
#                                          (len(data[i:i+gap])-list(np.isnan(data[i:i+gap])).count(True)) )  )
#                                                                 # length of data - number of nans
#         null = list(map(smoo,range(end)))
#         print('done')
        
#         return np.array(out) 


def smooth(data=[],gap=33):

    """
    This function currently inputs a 1d array and smooths 
    it by averaging each point with gap//2 points to the left
    and right.  Gap is set to 33 by defult to average over the 
    diurnal tide cycle. 
    
    THIS FUNCTION DOES NOT AVERAGE THE FIRST AND LAST gap//2
    POINTS.

    """
    
    out = np.zeros_like(data)
    diff = gap//2

    
    out[:diff] = data[:diff]
    out[-diff:] = data[-diff:]

    i = list(range(diff,len(data)-diff))
    
    def null(i): # function allows i to be
        
        out[i] = np.nanmean(data[i-diff:i+diff])

    null_ = list(map(null,i))

    print('done')
    
    return out
